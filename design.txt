Tasktory設計メモ

core
|-- Tasktory    - タスクトリデータ構造定義
`-- Manager     - ファイルシステム（タスクトリの実体）の管理、同期、変換

trigger         - イベントトリガー

ui
|-- Journal     - タスクトリツリーと日報の変換機能
|-- Report      - 作業報告書出力機能
`-- Server      - HTML配信機能

◆タスクトリツリーとファイルシステムの対応

タスクトリツリーはpython上のデータ構造に過ぎず、実体として残す必要がある。
Pythonのオブジェクトを保存する方法はいくつかの選択肢がある。
Json, Pickle, DBなど。ここではファイルシステムそのものを使用してタスクトリツリ
ーを表現する事で、状態を保存する。これにより既存のファイルシステムを操作するだ
けでタスクトリシステムへのアクセスが可能になる。（つまり、優れたUIが手に入る）
具体的な投影方法について考えてみる。タスクトリが持ち、保存する必要のあるデータ
を列挙する
・名前              ：ディレクトリ名
・タイムスタンプ    ：プロファイルに保存
・期日              ：プロファイルに保存
・開始日            ：プロファイルに保存
・終了日            ：プロファイルに保存
・作業時間          ：プロファイルに保存
・親タスクトリ      ：親ディレクトリ
・子タスクトリ      ：子ディレクトリ
・ステータス        ：プロファイルに保存
・コメント          ：プロファイルに保存

/ProjectA/
|-- .tasktory
`-- TaskA/
    |-- .tasktory
    `-- SubTaskA/

◆コミットについて

◆メモ
普通にget/putする分には問題ない
しかしコミットするたびに、全ツリーを復元してマージしてputするのはあまりに冗長
get_treeをする際に復元するtreeを絞りたい
get_active_tree
get_subtree
タスクトリを復元することなくフィルターを掛けるのはちょっと難しい
一度復元すれば、次回はそれを参考にして復元する

問題の根本はおそらくタスクトリのマージがツリー構造を前提として、
それに依存したつくりになっているから
タスクトリを同定するためのベストな方法はIDを比較すること
タスクトリ名もパスも変わってしまう
ツリー構造になっているのは単に参照のし易さを求めただけに過ぎないので、
システムがツリー構造に依存する必要はない
ちなみにタスクトリがツリー構造である事の由来は、ファイルシステムを意識したので
はなく、タスクがツリー構造だからである。ファイルシステムと構造が一致しているの
は偶然に過ぎない。（その偶然を利用してはいるし、大きな意味も持っているが）
マージがツリー構造に依存せず、単にIDだけを参考にして行われれば問題は解決する
ただしファイルシステムはツリー構造なので、コンバートは必要

でもちょっと待って欲しい
ジャーナルからタスクトリを作成する際、当然IDは指定しない
IDはManagerが管理するので、基本的に人間の目には触れない
従ってジャーナルにはIDが記載されないのが自然である
しかしマージする際にはタスクトリの同定のためにIDが必要
IDが記載されていない場合は新規作成扱い？
でもIDは記載したくない。→記載しないと同定できないので、仕方なくする
そもそもタスクトリを作成するにはIDが必要
ファイルシステム的にはパス（名前）での同定が望ましい
問題はパスが変わったときの解決方法
同期自体あまりしたくない

#12345/SmartServ/NewService/PutIdea @20day [9:00-12:00]
/SmartServ/NewService/NewTask [13:00-14:00]

・ジャーナル側の手順
ジャーナルに記載されたIDからタスクトリを復元する
フルパスを取得する
フルパスからタスクトリを復元する
マージして上書き保存する

ジャーナルにIDが記載されていない場合は新規作成とみなす
パスから素直にディレクトリを作成する

理想
・ジャーナルは基本的に開きっぱなし
・ジャーナルとファイルシステムの同期は常に取れている
　・ジャーナルでタスクトリを作成すればファイルシステムに反映される
　・ファイルシステムで作成、移動、削除をすればジャーナルに反映される
・ジャーナルにはIDやフルパスは書かない

同期方法
