Tasktory設計メモ

main.py         - 常駐し、定期的に処理を行うメイン機能
core
|-- Tasktory    - タスクトリデータ構造定義
`-- Manager     - ファイルシステム（タスクトリの実体）の管理、同期、変換
ui
|-- Journal     - タスクトリツリーと日報の変換機能
|-- Report      - 作業報告書出力機能
|-- reports/    - 作業報告書出力用テンプレートモジュール群
`-- Summary     - HTMLによるサマリー出力機能

◆製造リスト
monitor.py
lib.core.Tasktory.py
lib.core.Manager.py
lib.ui.Journal.py
lib.ui.Report.py
lib.ui.reports.report.sample.py
lib.ui.Summary.py

test.core.Tasktory.py
test.core.Manager.py
test.ui.Journal.py
test.ui.Report.py
test.ui.Summary.py

◆課題等

・レポートテンプレート問題
  レポートをコンフィグとテンプレートから作成する方法は、柔軟性に欠ける。
  レポートの形式は組織やマネージャによって大きく変わる事が想定されるため、ある
  程度決まった形式のテンプレートしか使用できないのでは、問題がある。

  代案として、コンフィグとテンプレートを提供するのではなく、reportのサブモジュ
  ールを提供する方式なら高い柔軟性を維持できる。
  lib.ui.Report
  lib.ui.report.weekly
  lib.ui.report.monthly
  ただしこの方法では新しいレポートを追加する際に、Tasktoryの知識が必要になり、
  いちいちプログラムを組む必要がある。

  更に代案として、ある程度決まった形式のテンプレートをいくつか用意する方法もあ
  る。この方法を取るには様々なレポートのパターンに精通している必要がある

・モニタリング問題
  ジャーナルやファイルシステムの更新を監視する機構は各OSに用意されているが、OS
  によって実現方法が異なるため、統一できない。重要なのはWindowsだが、この場合
  pywin32などの外部パッケージに頼らざるを得ず、スタンドアロンとするための施策が
  必要である

  妥協案としてポーリングを用いる方法もある。この方法ならOSの機能に依存せず、実
  装も容易である。ただし更新にタイムラグが発生し、マシンに無駄な負荷もかかる。
  とはいえ最初に取る手法としては悪くなく、将来的に性能を追求したくなったら別の
  手段を取れば良い。

・ディレクトリ名テンプレート変更問題
  タスクトリが作成するディレクトリ名はコンフィグのテンプレートに従って決定され
  るが、このコンフィグを変更した場合に全ディレクトリ名に即座に反映したい。しか
  し作業中のディレクトリには反映できない、コンフィグの変更を判断する適切な材料
  が無い（ディレクトリ名は書き込み時にしか考慮されないため）、パス変更の影響に
  大して責任が持てない、といった理由であまり良い実装が出来そうに無い。

  （コンフィグ変更の判断について補足）
  テンプレートが"%ID.%NAME"だったとして、その後"%NAME"に変更したとする。
  その後スクリプト側が"1234.HOGE"という名前のディレクトリ（タスクトリ）を見つけ
  たとして、それがIDが1234で名前がHOGEというタスクトリなのか、単に"1234.HOGE"と
  いう名前のタスクトリなのか区別する事が難しい。コンフィグファイルの変更を検出
  するのもあまり気が乗らない

  妥協案になるが、テンプレートの変更が反映されるのは、それ以降のディレクトリ名
  のみにしてしまうと大変楽である。この場合既存のディレクトリ名はユーザーの責任
  で変更して貰う事になる。

・無期タスク問題
  無期限のタスクを許可するかどうか。無期限のタスクは実務上は便利だが、便利すぎ
  るため期限設定を怠けさせる危険がある。いっそ期日をコンストラクタの必須引数に
  するのも手である。しかし許可しない場合は各所で不便を強いられる。例えばジャー
  ナルの出力において無期限タスクをTodoに表示したくないが、その判別は難しい。で
  はConstにするのはどうか。Constも同様に期限の存在しない定常タスクとして追加さ
  れたステータスである（便宜上期限設定は必要だが）。単にカテゴライズのためのタ
  スクトリ（プロジェクト名など）と実際に作業時間が計上される定常タスクは一緒に
  したくない。では専用のステータスをまた追加してはどうか。現時点でジャーナルに
  表示される項目（＝ステータスの数）はTodo, Wait, Done, Constの４つでこれ以上
  の増加は好ましくない。カテゴライズ用の無期限タスクトリも手軽に一覧したい需要
  はあるが、それをジャーナルでやるのは好ましくない。変更しない前提なのでサマリ
  ーなどで表示すべきだ。とはいえ、ステータスを追加したからといってジャーナルに
  追加しなければならないという事はなく、区別のためにステータスを追加するのは有
  効な案である。もちろん、データ構造が複雑になっていくのは避けたいし、ステータ
  スが増える＝状態が増えるなので極力避けたい。

  無期限タスクについてはコンセプトや思想といった根本的な観点から論じるべきであ
  る。全てのタスクには期日を設けるべき、という考え方には一定の説得力がある。そ
  れが直接作業時間を計上しない、プロジェクト名やチーム名であったとしても有限で
  あるのは事実である。こういったものにも期日を適切に設定することで、それが終了
  した後にサマリーを表示する上で恩恵を得られるだろう。また各種処理において、全
  てのタスクトリには期日が設定されている、という前提も得られる。

  無期限タスクは禁止する

  問題は、期日を適切に設定し得ない場合と、各UIにおける分類方法である。前者につ
  いては、ジャーナルから簡単に期日を更新できる事から、仮の期日を設定し更新して
  いけば良い。後者については「十分長い期日」が設定されているタスクを近似的に無
  期タスクとして扱う、専用のステータスを追加する、といった手段が考えら得る。

  1. 期日を利用する
  最も無難で、無期限タスクの性質に近い方法である。問題は期日の更新を前提として
  いる事である。また考えにくいが非常に期日の遠い通常タスクが発生した場合、問題
  が起こる（ただし期日が近くなれば表示されるし、期日が遠くてもしなければならな
  いタスクがあるなら細分化して短い期日を設定するべきであるので、問題は無い）

  2. 専用のステータスを追加する
  過不足無く確実に分類できる方法であるが、ジャーナルに専用の項目を作成する必要
  があるのが非常にイケてない。ジャーナルは使い勝手を重視したいので表示したくな
  い。（できればConstも表示したくない）

  １番を採用することにする。併せて、期日をコンストラクタの必須引数にする
