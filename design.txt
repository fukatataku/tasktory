Tasktory設計メモ

main.py         - 常駐し、定期的に処理を行うメイン機能
core
|-- Tasktory    - タスクトリデータ構造定義
`-- Manager     - ファイルシステム（タスクトリの実体）の管理、同期、変換
ui
|-- Journal     - タスクトリツリーと日報の変換機能
|-- Report      - 作業報告書出力機能
`-- Summary     - HTMLによるサマリー出力機能

◆課題等

・レポートテンプレート問題
  レポートをコンフィグとテンプレートから作成する方法は、柔軟性に欠ける。
  レポートの形式は組織やマネージャによって大きく変わる事が想定されるため、ある
  程度決まった形式のテンプレートしか使用できないのでは、問題がある。

  代案として、コンフィグとテンプレートを提供するのではなく、reportのサブモジュ
  ールを提供する方式なら高い柔軟性を維持できる。
  lib.ui.Report
  lib.ui.report.weekly
  lib.ui.report.monthly
  ただしこの方法では新しいレポートを追加する際に、Tasktoryの知識が必要になり、
  いちいちプログラムを組む必要がある。

  更に代案として、ある程度決まった形式のテンプレートをいくつか用意する方法もあ
  る。この方法を取るには様々なレポートのパターンに精通している必要がある

・モジュール検索問題
  レポートテンプレート問題の解決策として提案した、モジュールによるレポートの追
  加だが、モジュールを追加した場合に自動的に実行リストに加える方法が未解決であ
  る。

・モニタリング問題
  ジャーナルやファイルシステムの更新を監視する機構は各OSに用意されているが、OS
  によって実現方法が異なるため、統一できない。重要なのはWindowsだが、この場合
  pywin32などの外部パッケージに頼らざるを得ず、スタンドアロンとするための施策が
  必要である

  妥協案としてポーリングを用いる方法もある。この方法ならOSの機能に依存せず、実
  装も容易である。ただし更新にタイムラグが発生し、マシンに無駄な負荷もかかる。
  とはいえ最初に取る手法としては悪くなく、将来的に性能を追求したくなったら別の
  手段を取れば良い。
