Tasktory設計メモ

main.py         - 常駐し、定期的に処理を行うメイン機能
core
|-- Tasktory    - タスクトリデータ構造定義
`-- Manager     - ファイルシステム（タスクトリの実体）の管理、同期、変換
ui
|-- Journal     - タスクトリツリーと日報の変換機能
|-- Report      - 作業報告書出力機能
|-- reports/    - 作業報告書出力用テンプレートモジュール群
`-- Summary     - HTMLによるサマリー出力機能

◆製造リスト
monitor.py
lib.core.Tasktory.py
lib.core.Manager.py
lib.ui.Journal.py
lib.ui.Report.py
lib.ui.reports.report.sample.py
lib.ui.Summary.py

test.core.Tasktory.py
test.core.Manager.py
test.ui.Journal.py
test.ui.Report.py
test.ui.Summary.py

◆課題等

・レポートテンプレート問題
  レポートをコンフィグとテンプレートから作成する方法は、柔軟性に欠ける。
  レポートの形式は組織やマネージャによって大きく変わる事が想定されるため、ある
  程度決まった形式のテンプレートしか使用できないのでは、問題がある。

  代案として、コンフィグとテンプレートを提供するのではなく、reportのサブモジュ
  ールを提供する方式なら高い柔軟性を維持できる。
  lib.ui.Report
  lib.ui.report.weekly
  lib.ui.report.monthly
  ただしこの方法では新しいレポートを追加する際に、Tasktoryの知識が必要になり、
  いちいちプログラムを組む必要がある。

  更に代案として、ある程度決まった形式のテンプレートをいくつか用意する方法もあ
  る。この方法を取るには様々なレポートのパターンに精通している必要がある

・モジュール検索問題
  レポートテンプレート問題の解決策として提案した、モジュールによるレポートの追
  加だが、モジュールを追加した場合に自動的に実行リストに加える方法が未解決であ
  る。

・モニタリング問題
  ジャーナルやファイルシステムの更新を監視する機構は各OSに用意されているが、OS
  によって実現方法が異なるため、統一できない。重要なのはWindowsだが、この場合
  pywin32などの外部パッケージに頼らざるを得ず、スタンドアロンとするための施策が
  必要である

  妥協案としてポーリングを用いる方法もある。この方法ならOSの機能に依存せず、実
  装も容易である。ただし更新にタイムラグが発生し、マシンに無駄な負荷もかかる。
  とはいえ最初に取る手法としては悪くなく、将来的に性能を追求したくなったら別の
  手段を取れば良い。

・ディレクトリ名テンプレート変更問題
  タスクトリが作成するディレクトリ名はコンフィグのテンプレートに従って決定され
  るが、このコンフィグを変更した場合に全ディレクトリ名に即座に反映したい。しか
  し作業中のディレクトリには反映できない、コンフィグの変更を判断する適切な材料
  が無い（ディレクトリ名は書き込み時にしか考慮されないため）、パス変更の影響に
  大して責任が持てない、といった理由であまり良い実装が出来そうに無い。

  （コンフィグ変更の判断について補足）
  テンプレートが"%ID.%NAME"だったとして、その後"%NAME"に変更したとする。
  その後スクリプト側が"1234.HOGE"という名前のディレクトリ（タスクトリ）を見つけ
  たとして、それがIDが1234で名前がHOGEというタスクトリなのか、単に"1234.HOGE"と
  いう名前のタスクトリなのか区別する事が難しい。コンフィグファイルの変更を検出
  するのもあまり気が乗らない

  妥協案になるが、テンプレートの変更が反映されるのは、それ以降のディレクトリ名
  のみにしてしまうと大変楽である。この場合既存のディレクトリ名はユーザーの責任
  で変更して貰う事になる。
