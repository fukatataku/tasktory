Tasktory設計メモ

core
|-- Tasktory    - タスクトリデータ構造定義
`-- Manager     - ファイルシステム（タスクトリの実体）の管理、同期、変換

trigger         - イベントトリガー

ui
|-- Journal     - タスクトリツリーと日報の変換機能
|-- Report      - 作業報告書出力機能
`-- Server      - HTML配信機能

◆タスクトリツリーとファイルシステムの対応

タスクトリツリーはpython上のデータ構造に過ぎず、実体として残す必要がある。
Pythonのオブジェクトを保存する方法はいくつかの選択肢がある。
Json, Pickle, DBなど。ここではファイルシステムそのものを使用してタスクトリツリ
ーを表現する事で、状態を保存する。これにより既存のファイルシステムを操作するだ
けでタスクトリシステムへのアクセスが可能になる。（つまり、優れたUIが手に入る）
具体的な投影方法について考えてみる。タスクトリが持ち、保存する必要のあるデータ
を列挙する
・名前              ：ディレクトリ名
・タイムスタンプ    ：プロファイルに保存
・期日              ：プロファイルに保存
・開始日            ：プロファイルに保存
・終了日            ：プロファイルに保存
・作業時間          ：プロファイルに保存
・親タスクトリ      ：親ディレクトリ
・子タスクトリ      ：子ディレクトリ
・ステータス        ：プロファイルに保存
・コメント          ：プロファイルに保存

/ProjectA/
|-- .tasktory
`-- TaskA/
    |-- .tasktory
    `-- SubTaskA/

◆ジャーナルとファイルシステムの同期について

同期はポーリングで一定時間ごとに実施する
全タスクツリーを持っておき、一定時間ごとにタスクツリーを再度生成する
２つのタスクツリーに差分があればそれをジャーナルに反映する

またジャーナルのタイムスタンプが変化していれば、
ジャーナルの内容をコミットする

◆同期の詳細な手順（ジャーナル→ファイルシステム）
タスクトリ記述行からタスクトリを生成する
既存のタスクの場合
→ ID, name(path), timestamp, timetable, status, commentsを取得できる
→ 変更が無ければ更新したくない

新規のタスクの場合
→ name(path), timestamp, timetable, status, comments, deadlineを取得できる
→ name(path)が正しい前提で作成する
→ 作成するとIDが払い出されるので、ジャーナルを更新する

更新の方法
・前提
まず、ジャーナルから復元されるタスクトリに完全性はない
ルートタスクからのツリー構造にはなっておらず、差分のあるタスクトリのみである
従って、完全たツリー２つを足して返す（従来の）方法は使えない

・必要なタスクトリのみ更新する方法
IDで検索しなければならないので、この方法は使えない
IDはタスクトリを復元しなければわからず、
結局タスクツリーを復元する必要があるから

・タスクツリーを部分的に復元してマージ、プットする方法
タスクトリのパスが正しい前提ならうまくいくが、パスの解決に気を使わなければなら
ず、処理も煩雑になる。そもそもこんな面倒なことをするのは処理時間を心配しての事
だが、もっと別のアプローチも取れるし、今気を使うことではない

・全タスクツリーを復元してマージ、プットする方法
全タスクツリーを復元すればIDによる検索は容易である。

可能な更新

・ジャーナルによる更新が推奨
新規作成
作業時間追加
ステータス変更
期日設定／変更
コメント追加／変更

・ファイルシステムによる更新が推奨
名前、パス変更
    理屈の上ではジャーナルでもできるが、他のパスが解決されている必要がある
    同時に複数のパスが変更された場合整合性の管理が極めて複雑になる
    ジャーナルでのパス変更は禁止（無視）した方が無難
