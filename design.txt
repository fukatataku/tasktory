Tasktory設計メモ

main.py         - 常駐し、定期的に処理を行うメイン機能
core
|-- Tasktory    - タスクトリデータ構造定義
`-- Manager     - ファイルシステム（タスクトリの実体）の管理、同期、変換
ui
|-- Journal     - タスクトリツリーと日報の変換機能
|-- Report      - 作業報告書出力機能
|-- reports/    - 作業報告書出力用テンプレートモジュール群
`-- Summary     - HTMLによるサマリー出力機能

◆製造リスト
monitor.py
lib.core.Tasktory.py
lib.core.Manager.py
lib.ui.Journal.py
lib.ui.Report.py
lib.ui.reports.report.sample.py
lib.ui.Summary.py

test.core.Tasktory.py
test.core.Manager.py
test.ui.Journal.py
test.ui.Report.py
test.ui.Summary.py

◆課題等

○レポートテンプレート問題
  レポートをコンフィグとテンプレートから作成する方法は、柔軟性に欠ける。
  レポートの形式は組織やマネージャによって大きく変わる事が想定されるため、ある
  程度決まった形式のテンプレートしか使用できないのでは、問題がある。

  代案として、コンフィグとテンプレートを提供するのではなく、reportのサブモジュ
  ールを提供する方式なら高い柔軟性を維持できる。
  lib.ui.Report
  lib.ui.report.weekly
  lib.ui.report.monthly
  ただしこの方法では新しいレポートを追加する際に、Tasktoryの知識が必要になり、
  いちいちプログラムを組む必要がある。

  更に代案として、ある程度決まった形式のテンプレートをいくつか用意する方法もあ
  る。この方法を取るには様々なレポートのパターンに精通している必要がある

・モニタリング問題
  ジャーナルやファイルシステムの更新を監視する機構は各OSに用意されているが、OS
  によって実現方法が異なるため、統一できない。重要なのはWindowsだが、この場合
  pywin32などの外部パッケージに頼らざるを得ず、スタンドアロンとするための施策が
  必要である

  妥協案としてポーリングを用いる方法もある。この方法ならOSの機能に依存せず、実
  装も容易である。ただし更新にタイムラグが発生し、マシンに無駄な負荷もかかる。
  とはいえ最初に取る手法としては悪くなく、将来的に性能を追求したくなったら別の
  手段を取れば良い。

○ディレクトリ名テンプレート変更問題
  タスクトリが作成するディレクトリ名はコンフィグのテンプレートに従って決定され
  るが、このコンフィグを変更した場合に全ディレクトリ名に即座に反映したい。しか
  し作業中のディレクトリには反映できない、コンフィグの変更を判断する適切な材料
  が無い（ディレクトリ名は書き込み時にしか考慮されないため）、パス変更の影響に
  大して責任が持てない、といった理由であまり良い実装が出来そうに無い。

  （コンフィグ変更の判断について補足）
  テンプレートが"%ID.%NAME"だったとして、その後"%NAME"に変更したとする。
  その後スクリプト側が"1234.HOGE"という名前のディレクトリ（タスクトリ）を見つけ
  たとして、それがIDが1234で名前がHOGEというタスクトリなのか、単に"1234.HOGE"と
  いう名前のタスクトリなのか区別する事が難しい。コンフィグファイルの変更を検出
  するのもあまり気が乗らない

  妥協案になるが、テンプレートの変更が反映されるのは、それ以降のディレクトリ名
  のみにしてしまうと大変楽である。この場合既存のディレクトリ名はユーザーの責任
  で変更して貰う事になる。

○無期タスク問題
  無期限のタスクを許可するかどうか。無期限のタスクは実務上は便利だが、便利すぎ
  るため期限設定を怠けさせる危険がある。いっそ期日をコンストラクタの必須引数に
  するのも手である。しかし許可しない場合は各所で不便を強いられる。例えばジャー
  ナルの出力において無期限タスクをTodoに表示したくないが、その判別は難しい。で
  はConstにするのはどうか。Constも同様に期限の存在しない定常タスクとして追加さ
  れたステータスである（便宜上期限設定は必要だが）。単にカテゴライズのためのタ
  スクトリ（プロジェクト名など）と実際に作業時間が計上される定常タスクは一緒に
  したくない。では専用のステータスをまた追加してはどうか。現時点でジャーナルに
  表示される項目（＝ステータスの数）はTodo, Wait, Done, Constの４つでこれ以上
  の増加は好ましくない。カテゴライズ用の無期限タスクトリも手軽に一覧したい需要
  はあるが、それをジャーナルでやるのは好ましくない。変更しない前提なのでサマリ
  ーなどで表示すべきだ。とはいえ、ステータスを追加したからといってジャーナルに
  追加しなければならないという事はなく、区別のためにステータスを追加するのは有
  効な案である。もちろん、データ構造が複雑になっていくのは避けたいし、ステータ
  スが増える＝状態が増えるなので極力避けたい。

  無期限タスクについてはコンセプトや思想といった根本的な観点から論じるべきであ
  る。全てのタスクには期日を設けるべき、という考え方には一定の説得力がある。そ
  れが直接作業時間を計上しない、プロジェクト名やチーム名であったとしても有限で
  あるのは事実である。こういったものにも期日を適切に設定することで、それが終了
  した後にサマリーを表示する上で恩恵を得られるだろう。また各種処理において、全
  てのタスクトリには期日が設定されている、という前提も得られる。

  無期限タスクは禁止する

  問題は、期日を適切に設定し得ない場合と、各UIにおける分類方法である。前者につ
  いては、ジャーナルから簡単に期日を更新できる事から、仮の期日を設定し更新して
  いけば良い。後者については「十分長い期日」が設定されているタスクを近似的に無
  期タスクとして扱う、専用のステータスを追加する、といった手段が考えら得る。

  1. 期日を利用する
  最も無難で、無期限タスクの性質に近い方法である。問題は期日の更新を前提として
  いる事である。また考えにくいが非常に期日の遠い通常タスクが発生した場合、問題
  が起こる（ただし期日が近くなれば表示されるし、期日が遠くてもしなければならな
  いタスクがあるなら細分化して短い期日を設定するべきであるので、問題は無い）

  2. 専用のステータスを追加する
  過不足無く確実に分類できる方法であるが、ジャーナルに専用の項目を作成する必要
  があるのが非常にイケてない。ジャーナルは使い勝手を重視したいので表示したくな
  い。（できればConstも表示したくない）

  １番を採用することにする。併せて、期日をコンストラクタの必須引数にする

○タスクトリステータス問題
  タスクトリには進行中、待機中、完了などのステータスがあり、そのためのメンバ変
  数も用意されている。そして外部から参照した際に使用する値を共通させるために、
  代入用の定数も定義されていた。しかしTasktory内部ではステータスの値を参照して
  動作を変えることは無く、ステータスを変更することも無い（getterとsetterを定義
  すれば別）。ステータスは飽くまで外部から参照・変更し、外部の動作を制御するた
  めにある。すなわちステータスの意味づけは完全に外部の挙動によって為される。で
  あれば、ステータスの定義（定数定義）自体を外部に明け渡してしまった方が良いの
  ではないか？実際、getterとsetterは使用する機会が殆どなく、外部からの定数への
  参照を抑止できなかったため廃止された。

  かといって、完全に定義を明け渡してしまうと、Tasktory自体は進行、待機、完了と
  いった基本的なタスクの状態を直接はサポートしないという事にもなる。ステータス
  はそっちで決めて、そっちで設定して、勝手に動作を変えてね、という事になる。

  明け渡すことで得られる恩恵は、テストしなくても良いということと、拡張（ステー
  タスの追加）が楽になるという事だ。不便としては、各UIで共通した値が使用できる
  ようにどこかで管理する必要がある事。

  やはり定数定義はTasktory内部で行うことにする

・新規中間タスクトリ問題
  例えばProjectAという最上位のタスクトリのみ存在する状況で以下のようなタスクラ
  インがジャーナルに登録されたとする
  /ProjectA/LargeTask/SmallTask @10 [9:00-12:00]
  この場合LargeTaskとSmallTaskが新規タスクトリであるが、期日が指定されているの
  はSmallTaskのみである。LargeTaskの期日はどう設定するべきか？以下に案を列挙す
  る。

  1. 新規作成時は下位のタスク（この場合SmallTask）に設定された値を使用する
     既に作成されている場合（ここではProjectAが相当）は、上位タスクの方が期日が
     遠ければ問題なし、期日が近ければ下位タスクに設定された値で上書きする。
     ただし期日は普通にマージすると単に新しい方のタスクトリのものを使用するので
     特別な処理が必要である。

  2. 新規作成時に限り下位のタスクに設定された値を使用する

  案は以上である。悪くないと思う。この方法なら十分長い期間に設定された無期タス
  クトリとも競合しない。懸念があるとすれば、上位タスクの期限を不注意により無視
  して下位タスクの期限を設定すると、上位タスクの期限が失われてしまう。親子関係
  にあるからといって、タスクトリ同士が干渉しあうのは良くない。基本的には中間タ
  スクも一つ一つ期日を吟味して設定すべきであるし、このやり方では無期タスクにす
  る事ができない。かといって新しいタスクが発生した場合に以下のような書き方をす
  るのは非常に面倒である。
  /ProjectA @3650 []
  /ProjectA/LargeTask @3650 []
  /ProjectA/LargeTask/SmallTask @10 []
  やってられない。これは中間タスクをどう表示するかという問題とも関わりがある。

・中間タスクトリ表示方法／終了方法
  中間タスクトリをどう表示するか。例えば以下のようなタスクがあるとする。
  /ProjectA/LargeTask/SmallTaskA @10 []
  /ProjectA/LargeTask/SmallTaskB @10 []
  この状況においてジャーナルの出力はどうなるべきだろうか？最もシンプルな例は
  /ProjectA @??? []
  /ProjectA/LargeTask @??? []
  /ProjectA/LargeTask/SmallTaskA @10 []
  /ProjectA/LargeTask/SmallTaskB @10 []
  という出力だろうが、これはあまりに冗長である。おそらく直接作業時間が形状され
  るのはSmallTaskA,Bのみであり、LargeTaskとProjectAはカテゴライズのためのもの
  だろう。したがって編集しないものがジャーナルに出る事になり、非常に鬱陶しい。
  例えば子を持たないもののみ表示する、といったルールを設けて以下のように表示す
  る事もできる。
  /ProjectA/LargeTask/SmallTaskA @10 []
  /ProjectA/LargeTask/SmallTaskB @10 []
  実際に作業するタスクトリはこの２つだけなのだから、一見すると良いように見える
  が、実は問題がある。それは、この２つのタスクトリが完了したらどうするのか、と
  言うことだ。つまりLargeTaskとProjectAはどうやって完了するのか。もちろん、子タ
  スクが全て完了したら自動で完了する、というのは論外である。考えられる動作は
  1. 未完了子タスクが無ければ出力するようにする
  2. 自分で記述を作って終了して貰う
  2.は論外。1.もタスク終了までのタイムラグがあり、面倒臭さが激増してしまうだろ
  う。ここまで来ると、この問題が表示方法だけでなく、終了方法の問題でもある事が
  わかる

  基本的な終了方法は◆Doneの項目にタスクラインを移すというものだ。従って中間タ
  スクの終了方法も同様にするのが最もシンプルなアイディアだ。タスクトリの終了方
  法をちょっと考えてみる
  ・自動
    ・期日が過ぎたら終了
    ・子タスクが全て完了したら終了
  ・手動
    ・タスクラインを移動
    ・ブラウザなどから終了ボタン
  タスクトリの制御を自動化するのは楽ができて大いに結構ではあるが、それは常に適
  切な処理が為される保証が無ければならない。自動化したシステムが意図しない動作
  をしてしまうと、簡単に破綻してしまう。理想的には「非常に簡単な手動による終了
  」の手段が提供されていると良い。しかし既に知られている通り、中間タスクトリの
  場合は終了を簡単にすると表示が冗長になり、表示をシンプルにすると終了方法が煩
  雑になる。悩ましい。

  必要なタスクだけを表示し、かつ（表示されない）中間タスクを簡単に終了させる方
  法を考える。

  1. 中間タスクは先に終了させてしまう
     必要十分な子タスクを作成した中間タスクは、その時点で完了させてしまう。つま
     り中間タスクの作業内容は「問題を分割してタスクを作成する事」という解釈だ。
     これなら「中間タスクの作業を完了した時点で手動で完了」させ、「子タスクを全
     て完了させる事でツリー全体が完了」という良い感じの動作になる。ただしこの方
     法では、より大きいプロジェクトのタスクトリなどが半永久的にジャーナルに表示
     される事になる。（無期限タスクにすれば良い？無期限タスクとの兼ね合いも考え
     る必要がある。）
